agentless architecture
  SSH enabled
  Python needs to be installed on linux server.
    ls /usr/bin/python3
  Powershell needs to be installed on windows server.

Ansible Tower
  UI Dashboard
  Centrally store automated Tasks
  config Permissions
  get health status

Other Tools
  puppet & chef
    use ruby - more difficult to learn
    need to install agent & manage updates

Install
  Locally or Remote Server
  Ansible is written in Python. Need Python to run
  can install via PIP (python package manager)

Inventory
  Static
    Could in text file. INI-style or Yaml 
    manually updated
  dynamic
    autogenerated
  location: ansible --version
    default: /etc/ansible/hosts
  ini-format
    list of hosts or IP address
    organized by groups
    host can be in multiple groups
  example
    134.122.92.122 ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_user=root
    ssh -i ~/.ssh/id_rsa root@134.122.92.122
  Group pre-defined
    all - every host
    ungrouped - hosts in all, not in another group
  group naming
    avoid dashes, underscore fine
    don't name group same as host
    can be nested. groups of group use xxx:children suffix
    ranges pattern matching [Start:End] - numbers or letters
      192.168.[4:7].[0:256]
      server[01:20].example.com
      [a:c].dns.example.com
  Yaml format
  ansible-Inventory -i inventory --list
  ansible-Inventory -y --list
  ansible hostname --list-hosts

config file
  check ansible_config env variable
  then ck ./ansible.cfg
  then ck ~/ansible.cfg
  several sections - key value pair
    [default]
      ssh connections
      remote_user, remote_port, ask_pass
    [privilege_escalation]
      become key - bool
      become_user ie root
      become_method - sudo 
      become_ask_pass - no/yes
  ansible-config dump --only-changed

ansible modules
  idempotent - only apply change if needed. It checks to see if in desired state.

adhoc commands
  use ansible commands
    host-pattern 
    -m modules
    -a all arguements
    ie. ansible all -m ping
  override default
    -k or --ask-pass will prompt password
    -u override remote_user
    -b privilege_escalation
    -K prompt password for escalation
    --become-method

playbook
  yaml must start with ---
  ansible-playbook filename.yml
    --limit: limits hosts or host pattern
    --syntax-check: verify that it can ingested
    -C: DryRun
  variables
    rules
      starts with letter
      allow: letters, numbers, underscore
      Space, Periods, and Dashes not allowed
    scope
      global: all
      host: set for host or groups
      play: for current play. def in vars or include_vars task
    precendence:
      level with highest precendence wins
      narrow over wide
      override with -e option
    vars block
      vars:
        user_name: jane
        user_state: present
    vars file
      vars_files:
        - vars/users.yaml
    Reference with double braces: {{ user_name }}
    may need to use double quote: "{{ user_name }}"

Secure Sensitive data with Ansible Vault
  ansible-vault create filename
  ansible-vault view filename
  ansible-vault edit filename
  ansible-vault encrypt filename #encrypt existing file
  ansible-vault encrypt filename --output=new_filename #encrypt as new file
  ansible-vault decrypt filename
  --vault-id password for vault when calling from playbook
  @promtp = prompt for value
  ansible-vault rekey filename #change password for file
  suppress output
    task: no_log: true

iteration
  Loop Variable item hold values of each iteration
  May need to use double quote: "{{ item }}"
  Task Keyword: Loop
    vars:
      myusers:
        - aditay
        - boris
        - carl
    loop: {{ myusers }}
    or
    loop:
      - flintstone
      - rubble
  Loop dictionary: with_dict
    with_dict:
    - { name: 'fred', group: 'flintstone'}
    - { name: 'barney', group: 'rubbles'}

Conditional
  task Keyword: when
  ==, <, >, <=, >=, !=, is defined, is not defined, not, in 
  ie:
    vars:
      run_tests: true
      my_service: httpd
    tasks:
      - name: 1
        when: run_tests
      - name: 2
        when: my_service is defined
  ansible_facts
    vars:
      supported_os:
        - RedHat
        - Fedora
    when ansible_facts['distribution'] in supported_os

trigger task w handler
  task that respond to notification (notify)
  like reboots and service restarts
  typically authored at the bottom of the script
  can call multiple handlers
  handlers run in order they are defined
  if more then one task notifies a handler, the handler only runs once.
  if a task doesn't report change, the handler is not called. 

recover from errors w blocks
  blocks: are logically unit
    like install and configure yum
    Things you want to attempt
  Rescue: recover from failure
    things you want to mitigate failure
  always: define task to always run
    things you want run no matter the situation/cleanup

ansible facts
  auto runs as "Gathering Facts" in playbook
  Can be gather at anytime by running setup module
  stored in variable: ansible_facts type: dictionary
  includes: network address, hostnames, os, and the like
  ie
    var: ansible_facts['fqdn'] #fully qualified dns name
    var: ansible_facts['default_ipv4']['address'] 

jinja2 template
  Use template module to deploy jinja2 template
  extention j2
  similiar to copy arguements
  {# COMMENT #}
  loop over set of items
    for & endfor
  Conditional
    if & endif
  filters = used to modify or process the value from the variable
    just transform data; data not changed
    ie
      capitalize first letter - {{ myname | capitalize }}
      multi filter - {{ mylist | unique | sort }}
  lookup plugin
    list plugins: ansible-doc -t lookup -l
    display doc: ansible-doc -t lookup plugin-name
    ie
      vars:
        aws_ip_ranges : "{{ lookup('url','https://ip-ranges.amazonaws.com/ip.json',split_lines=false) }}"
        
