trigger: none

parameters:
- name: envSelected
  displayName: Environment
  type: string
  default: Dev
  values:
  - Dev
  - Test
  - Prod
- name: locNorth
  displayName: Location North
  type: boolean
  default: false
- name: locSouth
  displayName: Location South
  type: boolean
  default: true
- name: deploygen01
  displayName: Deploy Asp Gen 01
  type: boolean
  default: true
- name: deploygen02
  displayName: Deploy Asp Gen 02
  type: boolean
  default: false
- name: deploygen03
  displayName: Deploy Asp Gen 03
  type: boolean
  default: false
- name: deploygen04
  displayName: Deploy Asp Gen 04
  type: boolean
  default: false

pool:
  vmImage: 'windows-2019'

variables:
- name: Environments
  value: 'Dev,Test,Prod'
- name: Locations
  value: 'North,South'
- name: Instances
  value: 'GEN01,GEN02,GEN03,GEN04'

stages:
  - stage: Init
    jobs:
      - job: InitVars
        steps:          
          - powershell: |
               $msgHash = @{
                  'North'  = $${{ parameters.locNorth }}
                  'South' = $${{ parameters.locSouth }}
                }
                $MsgArr = @()
                ForEach ($key in $msgHash.Keys) {
                  if ($msgHash[$key]) { $MsgArr += $key }
                }
                $myValue = $MsgArr -join ","
                Write-Host "Setting value to $myValue"
                Write-Host "##vso[task.setvariable variable=LocSelected;isOutput=true]$myValue"
            name: InitLoc
          - powershell: |
               $msgHash = @{
                  'GEN01' = $${{ parameters.deploygen01 }}
                  'GEN02' = $${{ parameters.deploygen02 }}
                  'GEN03' = $${{ parameters.deploygen03 }}
                  'GEN04' = $${{ parameters.deploygen04 }}
                }
                $MsgArr = @()
                ForEach ($key in $msgHash.Keys) {
                  if ($msgHash[$key]) { $MsgArr += $key }
                }
                $myValue = $MsgArr -join ","
                Write-Host "Setting value to $myValue"
                Write-Host "##vso[task.setvariable variable=InstSelected;isOutput=true]$myValue"
            name: InitInst
  - ${{ each env in split(variables.Environments, ',') }}:
    - ${{ each loc in split(variables.Locations, ',') }}:
      - stage: ${{ env }}${{ loc }}
        displayName: ${{ env }} ${{ loc }}
        dependsOn: Init
        condition: and(eq(dependencies.Init.result, 'Succeeded'), eq('${{ parameters.envSelected }}','${{ env }}'), contains(dependencies.Init.outputs['InitVars.InitLoc.LocSelected'],'${{ loc }}'))
        jobs:
        - ${{ each inst in split(variables.Instances, ',') }}:
          - job: ${{ inst }}
            condition: contains(stageDependencies.Init.InitVars.outputs['InitInst.InstSelected'],'${{ inst }}')
            steps:
              - script: |
                  echo ${{ env }}
                  echo ${{ loc }}
                  echo ${{ inst }}